{"version":3,"sources":["components/CryptoTable/index.tsx","components/ConverterBlock/index.tsx","styles.ts","App.tsx","stores/converterStore.ts","stores/index.ts","stores/currenciesStore.ts","index.tsx"],"names":["StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","CryptoTable","inject","observer","s","currenciesStore","converterStore","items","getItems","diffObj","getDiffObj","React","useEffect","fetchCoins","setInterval","Paper","className","paper","TableContainer","component","Table","table","aria-label","TableHead","align","TableBody","length","map","coin","onClick","setSelectedCoin","onClickRow","rowCurrency","hover","key","id","scope","FullNameInner","imageCoin","src","imageUrl","alt","fullName","name","price","volume24hour","reducer","state","action","type","payload","value","String","Number","inPrice","outPrice","toFixed","in","out","ConverterBlock","useState","selectedOutCoin","setSelectedOutCoin","coins","onUpdateField","dispatch","getSelectedCoin","find","obj","useReducer","value1","value2","cryptoInputBox","FormControl","fullWidth","currencyInput","TextField","onChange","e","target","label","currencyType","InputLabel","shrink","Select","MenuItem","useStyles","makeStyles","padding","spacing","text","secondary","display","marginBottom","minWidth","marginRight","alignItems","maxWidth","height","backgroundSize","backgroundRepeat","redColumn","greenColumn","cursor","App","Container","Grid","container","item","xs","ConverterStore","this","selectedCoin","observable","computed","stores","arr1","arr2","filter","index","diffCurrencies","reduce","initObj","newObj","o","oldObj","itemObj","setTimeout","axios","get","then","data","Data","CoinInfo","FullName","Name","Id","RAW","USD","PRICE","VOLUME24HOUR","ImageUrl","setItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ad6f2be.chunk.js","sourcesContent":["import React from 'react';\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {createStyles, Theme, withStyles} from \"@material-ui/core/styles\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {TCoin, TCoinDiff} from \"../../types\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\nimport ConverterStore from \"../../stores/converterStore\";\r\n\r\ninterface ICryptoTable {\r\n  s: any;\r\n  currenciesStore?: CurrenciesStore;\r\n  converterStore?: ConverterStore;\r\n}\r\n\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.background.default,\r\n      },\r\n    },\r\n  }),\r\n)(TableRow);\r\n\r\nconst CryptoTable = inject('currenciesStore', 'converterStore')\r\n(observer(({s, currenciesStore, converterStore}: ICryptoTable) => {\r\n  const items: TCoin[] = currenciesStore!.getItems;\r\n  const diffObj: TCoinDiff = currenciesStore!.getDiffObj;\r\n\r\n  React.useEffect(() => {\r\n    if (currenciesStore) {\r\n      currenciesStore.fetchCoins();\r\n      setInterval(() => {\r\n        currenciesStore.fetchCoins();\r\n      }, 30000)\r\n    }\r\n  }, []);\r\n\r\n  const onClickRow = (coin: TCoin) => {\r\n    if (converterStore) {\r\n      converterStore.setSelectedCoin(coin)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className={s.paper}>\r\n      <TableContainer component={Paper}>\r\n        <Table className={s.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"left\">FullName</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Name</StyledTableCell>\r\n              <StyledTableCell align=\"center\">Price</StyledTableCell>\r\n              <StyledTableCell align=\"center\">volume24hour</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {!items.length ? 'Загрузка...'\r\n              : items.map((coin: TCoin) => (\r\n              <StyledTableRow onClick={() => onClickRow(coin)} className={s.rowCurrency} hover key={coin.id}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  <div className={s.FullNameInner}>\r\n                    <img className={s.imageCoin} src={coin.imageUrl}\r\n                         alt=\"\"/>\r\n                    <div>{coin.fullName}</div>\r\n                  </div>\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">{coin.name}</StyledTableCell>\r\n                <StyledTableCell className={diffObj[coin.name] && s[`${diffObj[coin.name]}Column`]}\r\n                                 align=\"center\">${coin.price}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">${coin.volume24hour}</StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n}));\r\n\r\nexport default CryptoTable;","import React from 'react';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\nimport ConverterStore from \"../../stores/converterStore\";\r\nimport {TSelectedCoin} from \"../../types\";\r\n\r\ninterface IConverterBlock {\r\n  s: any;\r\n  currenciesStore?: CurrenciesStore;\r\n  converterStore?: ConverterStore;\r\n}\r\n\r\ntype TReducerState = {\r\n  value1: string;\r\n  value2: string;\r\n  inPrice: number;\r\n  outPrice: number;\r\n}\r\n\r\ntype TSetValueAction = {\r\n  type: string;\r\n  payload: string;\r\n}\r\n\r\ntype TAction = TSetValueAction;\r\n\r\nfunction reducer(state: TReducerState, action: any): TReducerState {\r\n  switch (action.type) {\r\n    case 'SET_VALUE':\r\n      return {\r\n        ...state,\r\n        [action.payload.name]: action.payload.value,\r\n        value2: String(\r\n          ((Number(action.payload.value) * state.inPrice) / state.outPrice).toFixed(4)),\r\n      };\r\n    case 'SET_PRICES':\r\n      return {\r\n        ...state,\r\n        inPrice: action.payload.in,\r\n        outPrice: action.payload.out,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst ConverterBlock: React.FC<IConverterBlock> =\r\n  inject('currenciesStore', 'converterStore')(\r\n    observer(({s, currenciesStore, converterStore}) => {\r\n      const [selectedOutCoin, setSelectedOutCoin] = React.useState('USD');\r\n      const coins: string[] = currenciesStore!.getItems.map(coin => coin.name);\r\n      const onUpdateField = (name: string, value: string) => {\r\n        dispatch({\r\n          type: 'SET_VALUE',\r\n          payload: {name, value},\r\n        })\r\n      };\r\n      const inPrice = Number(converterStore?.getSelectedCoin.price) || 0;\r\n      const outPrice = Number(currenciesStore!.getItems.find(obj => obj.name === selectedOutCoin)?.price) || 0;\r\n      const [state, dispatch] = React.useReducer(reducer, {\r\n        value1: '',\r\n        value2: '',\r\n        inPrice,\r\n        outPrice,\r\n      });\r\n      React.useEffect(() => {\r\n        dispatch({\r\n          type: 'SET_PRICES',\r\n          payload: {\r\n            in: inPrice,\r\n            out: outPrice,\r\n          }\r\n        })\r\n      }, [inPrice, outPrice]);\r\n\r\n      return (\r\n        <Paper className={s.paper}>\r\n          <div className={s.cryptoInputBox}>\r\n            <FormControl fullWidth className={s.currencyInput}>\r\n              <TextField\r\n                type='number'\r\n                value={state.value1}\r\n                onChange={(e: any) => onUpdateField('value1', e.target.value)}\r\n                label=\"Сумма\"/>\r\n            </FormControl>\r\n            <FormControl className={s.currencyType}>\r\n              <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Валюта\r\n              </InputLabel>\r\n\r\n              <Select value={converterStore?.getSelectedCoin.name || ''}>\r\n                {coins.map(name => <MenuItem value={name}>{name}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <div className={s.cryptoInputBox}>\r\n            <FormControl fullWidth className={s.currencyInput}>\r\n              <TextField value={state.value2}\r\n                         type='number'\r\n                         onChange={(e: any) => onUpdateField('value2', e.target.value)}\r\n                         label=\"Сумма\"/>\r\n            </FormControl>\r\n            <FormControl className={s.currencyType}>\r\n              <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                Валюта\r\n              </InputLabel>\r\n\r\n              <Select onChange={e => setSelectedOutCoin(e.target.value as string)}\r\n                      value={selectedOutCoin}>\r\n                <MenuItem value='USD'>USD</MenuItem>\r\n                {coins.map(name => <MenuItem value={name}>{name}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </Paper>\r\n      )\r\n    })\r\n  );\r\n\r\nexport default ConverterBlock;","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      padding: theme.spacing(10),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    cryptoInputBox: {\r\n      display: 'flex',\r\n      marginBottom: 20\r\n    },\r\n    currencyInput: {\r\n      minWidth: 'calc(75% - 10px)',\r\n      marginRight: 10\r\n    },\r\n    currencyType: {\r\n      minWidth: '25%',\r\n    },\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    FullNameInner: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    imageCoin: {\r\n      maxWidth: 30,\r\n      height: 30,\r\n      backgroundSize: 'cover',\r\n      backgroundRepeat: 'no-repeat',\r\n      marginRight: 15\r\n    },\r\n    redColumn: {\r\n      backgroundColor:'#ffd7d7'\r\n    },\r\n    greenColumn: {\r\n      backgroundColor: '#d9ffd7'\r\n    },\r\n    rowCurrency: {\r\n      cursor: 'pointer'\r\n    }\r\n  }),\r\n);","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport {CryptoTable, ConverterBlock} from \"./components\";\nimport {useStyles} from \"./styles\";\n\nconst App = () => {\n  const s = useStyles();\n  return (\n    <Container className={s.root} maxWidth=\"lg\">\n      <Grid container spacing={1}>\n        <Grid item xs={8}>\n          <CryptoTable s={s}/>\n        </Grid>\n        <Grid item xs={4}>\n          <ConverterBlock s={s}/>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n};\n\nexport default App;\n\n","import {action, computed, observable} from \"mobx\";\r\nimport {TCoin, TSelectedCoin} from \"../types\";\r\n\r\nclass ConverterStore {\r\n  @observable private selectedCoin: TSelectedCoin= {\r\n    name : '',\r\n    price: 0,\r\n  };\r\n\r\n  @computed\r\n  get getSelectedCoin() {\r\n    return this.selectedCoin;\r\n  }\r\n\r\n  @action\r\n  setSelectedCoin(coin: TCoin) {\r\n     this.selectedCoin = {\r\n      name: coin.name,\r\n      price: coin.price,\r\n    };\r\n  }\r\n}\r\n\r\nexport default ConverterStore;","import ConverterStore from './converterStore'\r\nimport CurrenciesStore from './currenciesStore'\r\n\r\nconst stores = {\r\n  currenciesStore: new CurrenciesStore(),\r\n  converterStore: new ConverterStore()\r\n};\r\n\r\nexport default stores;","import {observable, computed, action} from 'mobx'\r\nimport {TCoin, TCoinDiff} from \"../types\";\r\nimport axios from 'axios'\r\n\r\nimport stores from \"../stores\";\r\n\r\nclass CurrenciesStore {\r\n  @observable private items: TCoin[] = [];\r\n  @observable private diffObj: TCoinDiff = {};\r\n\r\n  @computed\r\n  get getItems() {\r\n    return this.items;\r\n  }\r\n  @computed\r\n  get getDiffObj() {\r\n    return this.diffObj;\r\n  }\r\n\r\n  @action\r\n  setItems = (items: TCoin[]): void => {\r\n    this.diffObj = this.diffCurrencies(this.items, items)\r\n      .reduce((initObj: TCoinDiff, obj) => {\r\n        const newObj: TCoin = items.find(o => o.name === obj.name)!;\r\n        const oldObj: TCoin = this.items.find(itemObj => itemObj.name === newObj.name)!;\r\n        const color: string = newObj.price === oldObj.price ? ''\r\n          : newObj.price > oldObj.price ? 'green' : 'red';\r\n        initObj[newObj.name] = color;\r\n\r\n        return initObj\r\n      }, {});\r\n    this.items = items;\r\n    setTimeout(() => {\r\n      this.diffObj = {}\r\n    }, 5000)\r\n  };\r\n\r\n  @action\r\n  fetchCoins = () => {\r\n    axios.get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD')\r\n      .then(({data}) => {\r\n        const coins: TCoin[] = data.Data.map((coin: any) => {\r\n          const obj: TCoin = {\r\n            fullName: coin.CoinInfo.FullName,\r\n            name: coin.CoinInfo.Name,\r\n            id: coin.CoinInfo.Id,\r\n            price: coin.RAW.USD.PRICE.toFixed(3),\r\n            'volume24hour': coin.RAW.USD.VOLUME24HOUR.toFixed(0),\r\n            imageUrl: `https://www.cryptocompare.com${coin.CoinInfo.ImageUrl}`\r\n          };\r\n          return obj;\r\n        });\r\n        this.setItems(coins)\r\n        stores.converterStore.setSelectedCoin(coins[0])\r\n      });\r\n  };\r\n\r\n  diffCurrencies(arr1: TCoin[], arr2: TCoin[]) {\r\n    return arr1.filter((obj, index) => {\r\n      if (obj.price !== arr2[index].price) {\r\n        return true\r\n      }\r\n      return false\r\n    })\r\n  }\r\n}\r\n\r\nexport default CurrenciesStore;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App';\nimport {Provider} from 'mobx-react'\n\nimport stores from './stores'\n\nimport 'normalize.css';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider {...stores}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}